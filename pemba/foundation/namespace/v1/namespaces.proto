// Copyright (C) 2024 by Grant Monroe grant@tnarg.com
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package pemba.foundation.namespace.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/field_info.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "NamespacesProto";
option java_package = "dev.pemba.foundation.namespace.v1";
option go_package = "go.pemba.dev/pemba/foundation/namespace/apiv1/namespacepb;namespacepb";

// Pemba Foundation Namespace API
//
// The Pemba Foundation Namespace API can be used to manage hierarchical
// namespaces. Namespaces are used to organize an Organization's resources and
// to apply IAM policies to them.
service Namespaces {
  option (google.api.default_host) = "foundation.pembaapis.dev";
  option (google.api.oauth_scopes) =
      "https://www.pembaapis.dev/auth/foundation";

  // Lists the namespaces that are direct descendants of supplied parent
  // resource. `list()` provides a strongly consistent view of the namespaces
  // underneath the specified parent resource. `list()` returns namespaces
  // sorted based upon the (ascending) lexical ordering of their display_name.
  // The caller must have `foundation.namespaces.list` permission on the
  // identified parent.
  //
  // (-- api-linter: core::0132::http-uri-parent=disabled
  //     aip.dev/not-precedent: A namespace can have a parent of either an
  //     organization or another namespace --)
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1/namespaces"
    };
    option (google.api.method_signature) = "parent";
  }

  // Retrieves a namespace identified by the supplied resource name.
  // Valid namespace resource names have the format `namespaces/{namespace_id}`
  // (for example, `namespaces/1234`).
  // The caller must have `foundation.namespaces.get` permission on the
  // identified namespace.
  rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      get: "/v1/{name=namespaces/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Creates a namespace in the resource hierarchy.
  // Returns an `Operation` which can be used to track the progress of the
  // namespace creation workflow.
  // Upon success, the `Operation.response` field will be populated with the
  // created Namespace.
  //
  // In order to succeed, the addition of this new namespace must not violate
  // the namespace naming, height, or fanout constraints.
  //
  // + The namespace's `display_name` must be distinct from all other namespaces
  // that share its parent.
  // + The addition of the namespace must not cause the total number of
  // namespaces under its parent to exceed 100.
  //
  // If the operation fails due to a namespace constraint violation, some errors
  // may be returned by the `CreateNamespace` request, with status code
  // `FAILED_PRECONDITION` and an error description. Other namespace constraint
  // violations will be communicated in the `Operation`, with the specific
  // `PreconditionFailure` returned in the details list in the `Operation.error`
  // field.
  //
  // The caller must have `foundation.namespaces.create` permission on the
  // identified parent.
  rpc CreateNamespace(CreateNamespaceRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/namespaces"
      body: "namespace"
    };
    option (google.api.method_signature) = "parent,namespace";
    option (google.longrunning.operation_info) = {
      response_type: "Namespace"
      metadata_type: "CreateNamespaceMetadata"
    };
  }

  // Updates a namespace.
  // Changes to the namespace `display_name` will be rejected if they violate
  // either the `display_name` formatting rules or the naming constraints
  // described here:
  //
  // The namespace's `display_name` must start and end with a letter or digit,
  // may contain letters, digits, spaces, hyphens and underscores and can be
  // between 3 and 30 characters.
  // The caller must have `foundation.namespaces.update` permission on the
  // identified namespace.
  //
  // If the update fails due to the unique name constraint then a
  // `PreconditionFailure` explaining this violation will be returned
  // in the Status.details field.
  rpc UpdateNamespace(UpdateNamespaceRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{namespace.name=namespaces/*}"
      body: "namespace"
    };
    option (google.api.method_signature) = "namespace,update_mask";
    option (google.longrunning.operation_info) = {
      response_type: "Namespace"
      metadata_type: "UpdateNamespaceMetadata"
    };
  }

  // Requests deletion of a namespace. The namespace is moved into the
  // [DELETE_REQUESTED][pemba.foundation.namespace.v1.Namespace.State.DELETE_REQUESTED]
  // state immediately, and is deleted approximately 30 days later. This method
  // may only be called on an empty namespace, where a namespace is empty if it
  // doesn't contain any namespaces or projects in the
  // [ACTIVE][pemba.foundation.namespace.v1.Namespace.State.ACTIVE] state. If
  // called on a namespace in
  // [DELETE_REQUESTED][pemba.foundation.namespace.v1.Namespace.State.DELETE_REQUESTED]
  // state the operation will result in a no-op success.
  // The caller must have `foundation.namespaces.delete` permission on the
  // identified namespace.
  rpc DeleteNamespace(DeleteNamespaceRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1/{name=namespaces/*}"
    };
    option (google.api.method_signature) = "name";
    option (google.longrunning.operation_info) = {
      response_type: "Namespace"
      metadata_type: "DeleteNamespaceMetadata"
    };
  }
}

// A namespace in an organization's resource hierarchy, used to
// organize that organization's resources.
message Namespace {
  option (google.api.resource) = {
    type: "foundation.pembaapis.dev/Namespace"
    pattern: "namespaces/{namespace}"
    singular: "namespace"
    plural: "namespaces"
  };

  // Namespace lifecycle states.
  enum State {
    // Unspecified state.
    STATE_UNSPECIFIED = 0;

    // The normal and active state.
    ACTIVE = 1;

    // The namespace has been marked for deletion by the user.
    DELETE_REQUESTED = 2;
  }

  // Output only. The resource name of the namespace.
  // Its format is `namespaces/{namespace_id}`, for example: "namespaces/1234".
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Required. The namespace's parent's resource name.
  // Updates to the namespace's parent must be performed using
  // [MoveNamespace][pemba.foundation.namespace.v1.Namespaces.MoveNamespace].
  string parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "foundation.pembaapis.dev/Namespace"
    }
  ];

  // The namespace's display name.
  // A namespace's display name must be unique amongst its siblings. For
  // example, no two namespaces with the same parent can share the same display
  // name. The display name must start and end with a letter or digit, may
  // contain letters, digits, spaces, hyphens and underscores and can be no
  // longer than 30 characters. This is captured by the regular expression:
  // `[\p{L}\p{N}]([\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?`.
  string display_name = 3 [(google.api.field_behavior) = REQUIRED];

  // Optional. To store small amounts of arbitrary data such as
  // provisioning metadata.
  map<string, string> annotations = 4 [(google.api.field_behavior) = OPTIONAL];

  // Output only. The system-assigned unique identifier for this
  // resource.
  string uid = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_info).format = UUID4
  ];

  // Output only. The lifecycle state of the namespace.
  // Updates to the state must be performed using
  // [DeleteNamespace][pemba.foundation.namespace.v1.Namespaces.DeleteNamespace].
  State state = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp when the namespace was created.
  google.protobuf.Timestamp create_time = 7
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp when the namespace was last modified.
  google.protobuf.Timestamp update_time = 8
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp when the namespace was requested to be deleted.
  google.protobuf.Timestamp delete_time = 9
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. If true, the namespace is being created or
  // updated. If false, there are no ongoing operations for the
  // namespace.
  bool reconciling = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. A checksum computed by the server based on the current value
  // of the namespace resource. This may be sent on update and delete requests
  // to ensure the client has an up-to-date value before proceeding.
  string etag = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The request for
// [ListNamespaces][pemba.foundation.namespace.v1.Namespaces.ListNamespaces].
message ListNamespacesRequest {
  // Required. The name of the parent resource whose namespaces are being
  // listed. Only children of this parent resource are listed; descendants are
  // not listed.
  //
  // If the parent is a namespace, use the value `namespaces/{namespace_id}`. If
  // the parent is an organization, use the value
  // `organizations/{org_id}`.
  //
  // Access to this method is controlled by checking the
  // `foundation.namespaces.list` permission on the `parent`.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "foundation.pembaapis.dev/Namespace"
    }
  ];

  // Optional. The maximum number of namespaces to return in the response. The
  // server can return fewer namespaces than requested. If unspecified, server
  // picks an appropriate default.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A pagination token returned from a previous call to
  // `ListNamespaces` that indicates where this listing should continue from.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Controls whether namespaces in the
  // [DELETE_REQUESTED][pemba.foundation.namespace.v1.Namespace.State.DELETE_REQUESTED]
  // state should be returned. Defaults to false.
  bool show_deleted = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The response for
// [ListNamespaces][pemba.foundation.namespace.v1.Namespaces.ListNamespaces].
message ListNamespacesResponse {
  // A possibly paginated list of namespaces that are direct descendants of
  // the specified parent resource.
  repeated Namespace namespaces = 1;

  // A pagination token returned from a previous call to `ListNamespaces`
  // that indicates from where listing should continue.
  string next_page_token = 2;
}

// The request for
// [GetNamespace][pemba.foundation.namespace.v1.Namespaces.GetNamespace].
message GetNamespaceRequest {
  // Required. The resource name of the namespace to retrieve.
  // Must be of the form `namespaces/{namespace_id}`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "foundation.pembaapis.dev/Namespace"
    }
  ];
}

// The request for
// [CreateNamespace][pemba.foundation.namespace.v1.Namespaces.CreateNamespace].
//
// (-- api-linter: core::0133::request-id-field=disabled
//     aip.dev/not-precedent: Not declarative. --)
message CreateNamespaceRequest {
  // Required. The namespace being created, only the display name and parent
  // will be consulted. All other fields will be ignored.
  Namespace namespace = 1 [(google.api.field_behavior) = REQUIRED];
}

// Metadata type for the operation returned by
// [CreateNamespace][pemba.foundation.namespace.v1.Namespaces.CreateNamespace].
message CreateNamespaceMetadata {
  // The display name of the namespace.
  string display_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The resource name of the namespace or organization we are creating the
  // namespace under.
  string parent = 2 [(google.api.field_behavior) = REQUIRED];
}

// The request for
// [UpdateNamespace][pemba.foundation.namespace.v1.Namespaces.UpdateNamespace].
message UpdateNamespaceRequest {
  // Required. The new definition of the Namespace. It must include the `name`
  // field, which cannot be changed.
  Namespace namespace = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Fields to be updated.
  // Only the `display_name` can be updated.
  google.protobuf.FieldMask update_mask = 2
      [(google.api.field_behavior) = REQUIRED];
}

// Metadata type for the operation returned by
// [updateNamespace][pemba.foundation.namespace.v1.Namespaces.UpdateNamespace].
message UpdateNamespaceMetadata {
  // The display name of the namespace.
  string display_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The resource name of the namespace or organization we are creating the
  // namespace under.
  string parent = 2 [(google.api.field_behavior) = REQUIRED];
}

// The request for
// [DeleteNamespace][pemba.foundation.namespace.v1.Namespaces.DeleteNamespace].
message DeleteNamespaceRequest {
  // Required. The resource name of the namespace to be deleted.
  // Must be of the form `namespaces/{namespace_id}`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "foundation.pembaapis.dev/Namespace"
    }
  ];
}

// Metadata type for the operation returned by
// [DeleteNamespace][pemba.foundation.namespace.v1.Namespaces.DeleteNamespace].
message DeleteNamespaceMetadata {}